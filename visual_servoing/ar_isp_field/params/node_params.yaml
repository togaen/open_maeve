#
# Node parameters.
#

#
# These camera parameters should correspond to those in markers.launch
# TODO(CD-44): Unify parameters between these nodes.
#
#camera_topic: '/cv_camera_node/image_raw'
#camera_topic: '/maeve_video_file/image_raw'
camera_topic: '/raspicam_node/image_rect'
#camera_topic: '/raspicam_node/image'
image_transport: 'compressed' # uncomment this to listen to image_transport topics

# node-relative topic, leave empty to disable visualization
#viz_isp_field_topic: ''
viz_isp_field_topic: 'viz_isp_field'

# Visualize zero or more intermediate horizon data structures computed by isp_controller_2d.
# The horizon types specified here should match the string versions of the HorizonType enums in the isp_controller_2d package.
visualize_horizons: [
  'control',
  'eroded_control',
  'guided_throttle',
  'yaw_guidance',
  'guidance'
]

# horizon structures are 1xN row vectors; to make visualization more useful, artificially stretch the visualization vertically
# must be > 0
horizon_viz_height: 10

# absolute topic name for desired command input
control_command_input_topic: '/joystick_controller_2d/command'

# node-relative topic for control command output
control_command_output_topic: 'command'

# bounds for scaling potential values for visualization; must be two elements with first less than zero and second greater than zero
# The upper bound should be the same as soft constraint range_max
# The lower bound should be less than 0 or the soft constraint range_min, if it is less than zero
viz_potential_bounds: [-25.0, 50.0]

# Print output to terminal during exectution?
verbose: false

# Whether to derive a guidance control from the ISP field.
potential_only_guidance: false

#
# AR tag tracking parameters
#

ar_tag_max_age: 0.3 # must be >= 0.0
ar_time_queue_size: 10 # number of elements to allocate for circular buffer
ar_time_queue_max_gap: 0.5 # seconds
output_frame_param_name: '/ar_track_alvar/output_frame'
marker_size_param_name: '/ar_track_alvar/marker_size'
ar_frame_prefix: 'ar_marker_'

# these need to match the set of tags being tracked by ar_track_alvar
ar_tag_obstacle_ids: [2, 3] #, 1, 2, 3, 4, 5, 6, 7, 8]
ar_tag_target_ids: []
